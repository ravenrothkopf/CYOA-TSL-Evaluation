initially assume{
    ! getCave;
    ! getMarket;
    ! getTown;    
}

initially guarantee {
    [passageTarget <- toForest];
}

always assume {
    [passageTarget <- toCave] <-> X getCave;
    [passageTarget <- toMarket] -> F getMarket;
    [passageTarget <- toTown] -> F getTown;
}

guarantee {
    (! (getCave)) W (getMarket);
    (! (getCave)) W (getTown);
}

always guarantee {
     F getCave;
     F getMarket;
     F getTown;
}